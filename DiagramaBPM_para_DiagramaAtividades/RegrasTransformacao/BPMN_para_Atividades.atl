-- @nsURI MetaModeloUML=http://www.eclipse.org/uml2/3.0.0/UML
-- @nsURI MetaModeloBPMN=http://stp.eclipse.org/bpmn


module BPMNparaAtividades;
create ModeloSaida: MetaModeloUML from ModeloEntrada: MetaModeloBPMN;


-- Helpers
--Helper para verificar se a atividade é inicial.
helper context MetaModeloBPMN!Activity def: isInitialNode(): Boolean =
	if self.activityType.toString().startsWith('EventStart') and self.activityType <>
			#EventStartTimer and self.activityType <> #EventStartMessage then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é um EventStartTimer.
helper context MetaModeloBPMN!Activity def: isInitialTimerNode(): Boolean =
	if self.activityType = #EventStartTimer then
		true
	else
		false
	endif;


--Helper para verificar se a atividade é um EventStartMessage.
helper context MetaModeloBPMN!Activity def: isInitialMessageNode(): Boolean =
	if self.activityType = #EventStartMessage then
		true
	else
		false
	endif;


--Helper para verificar se a atividade é Event Intermediate Message
helper context MetaModeloBPMN!Activity def: isEventIntermediateMessage(): Boolean =
	if 	self.activityType = #EventIntermediateMessage then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é intermediária
helper context MetaModeloBPMN!Activity def: isEventIntermediate(): Boolean =
	if 	self.activityType.toString().startsWith('EventIntermediate') and 
		self.activityType <> #EventIntermediateMessage then
		true
	else
		false
	endif;


--Helper para verificar se a atividade é final.
helper context MetaModeloBPMN!Activity def: isFinalNode(): Boolean =
	if self.activityType.toString().startsWith('EventEnd')  
		and self.activityType <> #EventEndMessage 
		and self.activityType <> #EventEndTerminate then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é EventEndMessage
helper context MetaModeloBPMN!Activity def: isFinalMessage(): Boolean =
	if 	self.activityType = #EventEndMessage then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é um Event End Terminate.
helper context MetaModeloBPMN!Activity def: isEventTerminate(): Boolean =
	if 	self.activityType = #EventEndTerminate then
		true
	else
		false
	endif;

--Helper para verificar se source name é null
helper context MetaModeloBPMN!SequenceEdge def: isSourceNameNull(): Boolean =
	if self.source.name.toString().size() = 0 then
		true
	else
		false
	endif;

--Helper para verificar se o target name é null
helper context MetaModeloBPMN!SequenceEdge def: isTargetNameNull(): Boolean =
	if self.target.name.toString().size() = 0 then
		true
	else
		false
	endif;

-- Helper para identificar se há apenas um incoming edge 
helper context MetaModeloBPMN!Activity def: isMultipleIncoming(): Boolean =
	if self.incomingEdges.first() <> self.incomingEdges.last() then
		true
	else
		false
	endif;

-- Helper para identificar se há apenas um outgoing edge 
helper context MetaModeloBPMN!Activity def: isMultipleOutgoing(): Boolean =
	if self.outgoingEdges.first() <> self.outgoingEdges.last() then
		true
	else
		false
	endif;



--Rules

--Rule para criar uma atividade e modelo UML por cada diagrama BPMN.
rule DiagramaBPMN2ModeloUML {
	from
		ModeloBPMN: MetaModeloBPMN!BpmnDiagram
	to
		ModeloUML: MetaModeloUML!Model (
			name <- 'Modelo UML (gerado)'
		),
		AtividadeUML: MetaModeloUML!Activity (
			name <- 'Atividade (gerada)',
			package <- ModeloUML,
			node <- MetaModeloUML!ActivityNode.allInstances(),
			partition <- MetaModeloUML!ActivityPartition.allInstances(),
			edge <- MetaModeloUML!ActivityEdge.allInstances()
		)
}

-- rules para eventos de inicio
rule InicioBPMN2InicioUML {
	from
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			AtividadeInicioBPMN.isInitialNode()
		)
	to
		AtividadeInicioUML: MetaModeloUML!InitialNode (
			name <- AtividadeInicioBPMN.name,
			inPartition <- AtividadeInicioBPMN.lanes.union(AtividadeInicioBPMN.lanes ->
					collect(lane | lane.pool)).union(AtividadeInicioBPMN.groups),
			incoming <- AtividadeInicioBPMN.incomingEdges,
			outgoing <- AtividadeInicioBPMN.outgoingEdges
		)
}

-- rule para event start timer 
rule EventStartTimerBPMN2AcceptEventActionUML {
	from
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			AtividadeInicioBPMN.isInitialTimerNode()
		)
	to
		ComentarioUML: MetaModeloUML!Comment (
			body <- AtividadeInicioBPMN.documentation
			),
		AtividadeInicioUML: MetaModeloUML!InitialNode (
			name <- AtividadeInicioBPMN.name,
			inPartition <- AtividadeInicioBPMN.lanes.union(AtividadeInicioBPMN.lanes ->
					collect(lane | lane.pool)).union(AtividadeInicioBPMN.groups),
			incoming <- AtividadeInicioBPMN.incomingEdges,
			outgoing <- AtividadeInicioBPMN.outgoingEdges,
			ownedComment <- ComentarioUML 
		)
}

-- rule para event start message 
rule EventStartMessageBPMN2AcceptEventUML {
	from
		StartMessageBPMN: MetaModeloBPMN!Activity (
			StartMessageBPMN.isInitialMessageNode()
		)
	to
		AcceptEventActionUML: MetaModeloUML!AcceptEventAction (
			name <- StartMessageBPMN.name,
			inPartition <- StartMessageBPMN.lanes.union(StartMessageBPMN.lanes ->
					collect(lane | lane.pool)).union(StartMessageBPMN.groups),
			incoming <- StartMessageBPMN.incomingEdges,
			outgoing <- StartMessageBPMN.outgoingEdges
			
		)		
				
}


-- eventos intermediarios
-- rule para event intermediate message 
rule EventIntermediateMessageBPMN2MensagemUML {
	from
		IntermediateMessageBPMN: MetaModeloBPMN!Activity (
			IntermediateMessageBPMN.isEventIntermediateMessage()
		)
	to
		ComentarioUML: MetaModeloUML!Comment (
			body <- IntermediateMessageBPMN.documentation
			),
		AcceptEventActionUML: MetaModeloUML!OpaqueAction (
			name <- 'Evento intermediário mensageiro: ' + IntermediateMessageBPMN.name,
			inPartition <- IntermediateMessageBPMN.lanes.union(IntermediateMessageBPMN.lanes ->
					collect(lane | lane.pool)).union(IntermediateMessageBPMN.groups),
			incoming <- IntermediateMessageBPMN.incomingEdges,
			outgoing <- IntermediateMessageBPMN.outgoingEdges,
			ownedComment <- ComentarioUML
		)		
				
}


-- rule para event intermediate message 
rule EventIntermediateBPMN2MensagemUML {
	from
		IntermediateBPMN: MetaModeloBPMN!Activity (
			IntermediateBPMN.isEventIntermediate()
		)
	to
		ComentarioUML: MetaModeloUML!Comment (
			body <- IntermediateBPMN.documentation
			),
		AcceptEventActionUML: MetaModeloUML!OpaqueAction (
			name <- 'Evento intermediário: ' + IntermediateBPMN.name,
			inPartition <- IntermediateBPMN.lanes.union(IntermediateBPMN.lanes ->
					collect(lane | lane.pool)).union(IntermediateBPMN.groups),
			incoming <- IntermediateBPMN.incomingEdges,
			outgoing <- IntermediateBPMN.outgoingEdges,
			ownedComment <- ComentarioUML
		)		
				
}


--eventos de fim
-- rule para eventos terminate
rule TerminateBPMN2FimUML {
	from
		TerminateBPMN: MetaModeloBPMN!Activity (
			TerminateBPMN.isEventTerminate()
		)
	to
		AtividadeFimUML: MetaModeloUML!ActivityFinalNode (
			name <- TerminateBPMN.name,
			inPartition <- TerminateBPMN.lanes.union(TerminateBPMN.lanes ->
					collect(lane | lane.pool)).union(TerminateBPMN.groups),
			incoming <- TerminateBPMN.incomingEdges,
			outgoing <- TerminateBPMN.outgoingEdges
		)
}

-- rules para eventos de fim com mensagem
rule MensagemFimBPMN2FimUML {
	from
		MensagemFimBPMN: MetaModeloBPMN!Activity (
			MensagemFimBPMN.isFinalMessage()
		)
	to
		MensagemFimUML: MetaModeloUML!SendSignalAction (
			name <- MensagemFimBPMN.name,
			inPartition <- MensagemFimBPMN.lanes.union(MensagemFimBPMN.lanes ->
					collect(lane | lane.pool)).union(MensagemFimBPMN.groups),
			incoming <- MensagemFimBPMN.incomingEdges		
			),
		AtividadeFimUML: MetaModeloUML!ActivityFinalNode (
			name <- MensagemFimBPMN.name,
			inPartition <- MensagemFimBPMN.lanes.union(MensagemFimBPMN.lanes ->
					collect(lane | lane.pool)).union(MensagemFimBPMN.groups),
			incoming <- MensagemFimBPMN.incomingEdges
		)
}


-- rules para none event ends e os demais eventos de fim ainda não tratados
rule FimBPMN2FimUML {
	from
		AtividadeFimBPMN: MetaModeloBPMN!Activity (
			AtividadeFimBPMN.isFinalNode()
		)
	to
		AtividadeFimUML: MetaModeloUML!FlowFinalNode (
			name <- AtividadeFimBPMN.name,
			inPartition <- AtividadeFimBPMN.lanes.union(AtividadeFimBPMN.lanes ->
					collect(lane | lane.pool)).union(AtividadeFimBPMN.groups),
			incoming <- AtividadeFimBPMN.incomingEdges,
			outgoing <- AtividadeFimBPMN.outgoingEdges
		)
}


-- Tasks
rule TaskBPMN2OpaqueAction {
	from
		TaskBPMN: MetaModeloBPMN!Activity (
			TaskBPMN.activityType = #Task and not TaskBPMN.looping
		)
	to
		OpaqueAction: MetaModeloUML!OpaqueAction (
			name <- TaskBPMN.name,
			inPartition <- TaskBPMN.lanes.union(TaskBPMN.lanes -> collect(lane | lane.
					pool)).union(TaskBPMN.groups),
			outgoing <- TaskBPMN.outgoingEdges,
			incoming <- TaskBPMN.incomingEdges
		)
}

rule LoopBPMN2LoopUML {
	from
		LoopBPMN: MetaModeloBPMN!Activity (
			LoopBPMN.activityType = #Task and LoopBPMN.looping
		)
	to
		LoopUML: MetaModeloUML!LoopNode (
			name <- LoopBPMN.name,
			inPartition <- LoopBPMN.lanes.union(LoopBPMN.lanes -> collect(lane | lane.
					pool)).union(LoopBPMN.groups),
			outgoing <- LoopBPMN.outgoingEdges,
			incoming <- LoopBPMN.incomingEdges)
}

-- Gateways
-- Gateway exclusivo
rule ExclusiveGatewayBPMN2DecisionNodeUML {
	from
		ExclusiveGatewayBPMN: MetaModeloBPMN!Activity (
			ExclusiveGatewayBPMN.activityType = #GatewayDataBasedExclusive and 
			ExclusiveGatewayBPMN.isMultipleOutgoing()
		)
	to
		DecisionNodeUML: MetaModeloUML!DecisionNode (
			name <- if
					ExclusiveGatewayBPMN.name.toString().size() > 0
					then
					ExclusiveGatewayBPMN.name
					else
					'ID:' + ExclusiveGatewayBPMN.iD.toString()
					endif,
			inPartition <- ExclusiveGatewayBPMN.lanes.union(ExclusiveGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(ExclusiveGatewayBPMN.groups),
			incoming <- ExclusiveGatewayBPMN.incomingEdges,
			outgoing <- ExclusiveGatewayBPMN.outgoingEdges
		)
}

-- Gateway exclusivo
rule ExclusiveGatewayBPMN2MergeNodeUML {
	from
		ExclusiveGatewayBPMN: MetaModeloBPMN!Activity (
			ExclusiveGatewayBPMN.activityType = #GatewayDataBasedExclusive and
			ExclusiveGatewayBPMN.isMultipleIncoming()
		)
	to
		MergeNodeUML: MetaModeloUML!MergeNode (
			name <- if
					ExclusiveGatewayBPMN.name.toString().size() > 0
					then
					ExclusiveGatewayBPMN.name
					else
					'ID:' + ExclusiveGatewayBPMN.iD.toString()
					endif,
			inPartition <- ExclusiveGatewayBPMN.lanes.union(ExclusiveGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(ExclusiveGatewayBPMN.groups),
			incoming <- ExclusiveGatewayBPMN.incomingEdges,
			outgoing <- ExclusiveGatewayBPMN.outgoingEdges
		)
}


-- Gateway inclusive
rule InclusiveGatewayBPMN2ForkNodeUML {
	from
		InclusiveGatewayBPMN: MetaModeloBPMN!Activity (
			InclusiveGatewayBPMN.activityType = #GatewayDataBasedInclusive and
					InclusiveGatewayBPMN.isMultipleOutgoing()
		)
	to
		StringExpressionUML: MetaModeloUML!StringExpression (			
			name <- '<Inclusive Gateway>'
			),
		InclusiveUML: MetaModeloUML!OpaqueAction (
			name <- if
					InclusiveGatewayBPMN.name <> OclUndefined
					then
					InclusiveGatewayBPMN.name
					else
					'ID:' + InclusiveGatewayBPMN.iD
					endif,
			inPartition <- InclusiveGatewayBPMN.lanes.union(InclusiveGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(InclusiveGatewayBPMN.groups),
			incoming <- InclusiveGatewayBPMN.incomingEdges,
			nameExpression <- StringExpressionUML  
			
			
		)
}

-- Gateway inclusive 
rule InclusiveGatewayBPMN2JoinNodeUML {
	from
		InclusiveGatewayBPMN: MetaModeloBPMN!Activity (
			InclusiveGatewayBPMN.activityType = #GatewayDataBasedInclusive and
					InclusiveGatewayBPMN.isMultipleIncoming()
		)
	to
		JoinNodeUML: MetaModeloUML!JoinNode (
			name <- if InclusiveGatewayBPMN.name <> OclUndefined then
					InclusiveGatewayBPMN.name.toString()
				else
					'ID:' + InclusiveGatewayBPMN.iD.toString()
				endif,
			inPartition <- InclusiveGatewayBPMN.lanes.union(InclusiveGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(InclusiveGatewayBPMN.groups),
			incoming <- InclusiveGatewayBPMN.incomingEdges,
			outgoing <- InclusiveGatewayBPMN.outgoingEdges
		)
}

-- Gateway paralelo
rule ParallelGatewayBPMN2ForkNodeUML {
	from
		ParallelGatewayBPMN: MetaModeloBPMN!Activity (
			ParallelGatewayBPMN.activityType = #GatewayParallel and ParallelGatewayBPMN.isMultipleOutgoing()
		)
	to
		ForkNodeUML: MetaModeloUML!ForkNode (
			name <- if ParallelGatewayBPMN.name <> OclUndefined then
					ParallelGatewayBPMN.name.toString()
				else
					'ID:' + ParallelGatewayBPMN.iD.toString()
				endif,
			inPartition <- ParallelGatewayBPMN.lanes.union(ParallelGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(ParallelGatewayBPMN.groups),
			incoming <- ParallelGatewayBPMN.incomingEdges,
			outgoing <- ParallelGatewayBPMN.outgoingEdges
		)
}

rule ParallelGatewayBPMN2JoinNodeUML {
	from
		ParallelGatewayBPMN: MetaModeloBPMN!Activity (
			ParallelGatewayBPMN.activityType = #GatewayParallel and ParallelGatewayBPMN.isMultipleIncoming()
		)
	to
		JoinNodeUML: MetaModeloUML!JoinNode (
			name <- if ParallelGatewayBPMN.name <> OclUndefined then
					ParallelGatewayBPMN.name.toString()
				else
					'ID:' + ParallelGatewayBPMN.iD.toString()
				endif,
			inPartition <- ParallelGatewayBPMN.lanes.union(ParallelGatewayBPMN.lanes ->
					collect(lane | lane.pool)).union(ParallelGatewayBPMN.groups),
			incoming <- ParallelGatewayBPMN.incomingEdges,
			outgoing <- ParallelGatewayBPMN.outgoingEdges
		)
}

-- Subprocesso
rule SubProcessBPMN2ExpansionRegionUML {
	from
		SubProcessBPMN: MetaModeloBPMN!Activity (
			SubProcessBPMN.activityType = #SubProcess
		)
	to
		ExpansionRegionUML: MetaModeloUML!ExpansionRegion (
			name <- SubProcessBPMN.name,
			inPartition <- SubProcessBPMN.lanes.union(SubProcessBPMN.lanes ->
					collect(lane | lane.pool)).union(SubProcessBPMN.groups),
			incoming <- SubProcessBPMN.incomingEdges,
			outgoing <- SubProcessBPMN.outgoingEdges
		)
}

-- Rule Data Object para Artefato
rule DataObjectBPMN2DataStoreUML {
	from
		DataObjectBPMN: MetaModeloBPMN!DataObject
	to
		--ObjetoUML: MetaModeloUML!ObjectNode (
		DataStoreUML: MetaModeloUML!DataStoreNode (
			name <- DataObjectBPMN.name,
			incoming <- DataObjectBPMN.associations
		)
}

-- Rule Association para Object Flow
rule AssociationBPMN2ObjectFlowUML {
	from
		AssociationBPMN: MetaModeloBPMN!Association
	to
		ObjectFlowUML: MetaModeloUML!ObjectFlow (
			name <- AssociationBPMN.source.name + '->' + AssociationBPMN.target.name
		)
}

-- Rule Text Annotation para Comment
rule TextBPMN2CommentUML {
	from
		TextBPMN: MetaModeloBPMN!TextAnnotation
	to
		Comment: MetaModeloUML!Comment (
			body <- TextBPMN.documentation
		)
}

-- Rule para transformação de Group  em Partition
rule GroupBPMN2ActivityGroupUML {
	from
		GrupoBPMN: MetaModeloBPMN!Group
	to
		GrupoUML: MetaModeloUML!ActivityPartition (
			name <- GrupoBPMN.name
		)
}

-- rules para transformação das sequence edge BPMN em control flow UML
rule SequenceEdgeBPMN2ControlFlowUML {
	from
		SequenceEdgeBPMN: MetaModeloBPMN!SequenceEdge
	to
		ActivityEdgeUML: MetaModeloUML!ControlFlow (
			name <- if SequenceEdgeBPMN.source.name.toString().size() = 0 or
					SequenceEdgeBPMN.source.name = OclUndefined then
					'ID: ' + SequenceEdgeBPMN.source.iD + '->' + 
						if SequenceEdgeBPMN.target.
								name.toString().size() = 0 or SequenceEdgeBPMN.target.name =
								OclUndefined then
							'ID: ' + SequenceEdgeBPMN.target.iD.toString()
						else
							SequenceEdgeBPMN.target.name.toString()
						endif
					else
						SequenceEdgeBPMN.source.name.toString() + '->' + 
							if SequenceEdgeBPMN.
								target.name.toString().size() = 0 or SequenceEdgeBPMN.target.
								name = OclUndefined then
							'ID: ' + SequenceEdgeBPMN.target.iD.toString()
							else
								SequenceEdgeBPMN.target.name.toString()
							endif
					endif
		)
}

--Rule para mapear os PoolsBPMN em ActivityPartitions
rule PoolBPMN2PartitionUML {
	from
		PoolBPMN: MetaModeloBPMN!Pool
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- PoolBPMN.name,
			subpartition <- PoolBPMN.lanes
		)
}

--Rule para mapear as LanesBPMN em ActivityPartitions
rule LaneBPM2PartitionUML {
	from
		LaneBPM: MetaModeloBPMN!Lane
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- LaneBPM.name,
			superPartition <- LaneBPM.pool
		)
}

--Rule para mapear as mensagens BPMN como Control Flow UML
rule MessagingEdgeBPMN2ControlFlowUML {
	from
		MessagingEdgeBPMN: MetaModeloBPMN!MessagingEdge
	to
		ControlFlowUML: MetaModeloUML!ControlFlow (
			name <- if MessagingEdgeBPMN.source.name.toString().size() = 0 or
					MessagingEdgeBPMN.source.name = OclUndefined then
					'ID: ' + MessagingEdgeBPMN.source.iD + '->' + if MessagingEdgeBPMN.
							target.name.toString().size() = 0 or MessagingEdgeBPMN.target.
							name = OclUndefined then
						'ID: ' + MessagingEdgeBPMN.target.iD
					else
						MessagingEdgeBPMN.target.name
					endif
				else
					MessagingEdgeBPMN.source.name.toString() + '->' + if
							MessagingEdgeBPMN.target.name.toString().size() = 0 or
							MessagingEdgeBPMN.target.name = OclUndefined then
						'ID: ' + MessagingEdgeBPMN.target.iD
					else
						MessagingEdgeBPMN.target.name
					endif
				endif,
			source <- MessagingEdgeBPMN.source,
			target <- MessagingEdgeBPMN.target
		)
}



