-- @nsURI MetaModeloUML=http://www.eclipse.org/uml2/3.0.0/UML
-- @nsURI MetaModeloBPMN=http://stp.eclipse.org/bpmn


module BPMNparaAtividades;
create ModeloSaida: MetaModeloUML from ModeloEntrada: MetaModeloBPMN;

--Helper para verificar se a atividade é uma atividade inicial.
helper context MetaModeloBPMN!Activity def: isInitialNode(): Boolean =
	if self.activityType.toString().startsWith('EventStart') then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é uma atividade final.
helper context MetaModeloBPMN!Activity def: isFinalNode(): Boolean =
	if self.activityType.toString().startsWith('EventEnd') then
		true
	else
		false
	endif;

rule DiagramaBPMN2ModeloUML {
	from
		ModeloBPMN: MetaModeloBPMN!BpmnDiagram
	to
		ModeloUML: MetaModeloUML!Model (
			name <- 'Modelo UML (gerado)'
		),
		AtividadeUML: MetaModeloUML!Activity (
			name <- 'Atividade (gerada)',
			package <- ModeloUML,			
			node <- MetaModeloUML!ActivityNode.allInstances(),
			partition <- MetaModeloUML!ActivityPartition.allInstances(),
			edge <- MetaModeloUML!ActivityEdge.allInstances()
		)
}

rule InicioBPMN2InicioUML {
	from
		AtividadeInicioBPMN: MetaModeloBPMN!Activity (
			AtividadeInicioBPMN.activityType.toString().startsWith('EventStart') 
		)
	to
		AtividadeInicioUML: MetaModeloUML!InitialNode (
			name <- AtividadeInicioBPMN.name		
			)
}


rule FimBPMN2FimUML {
	from
		AtividadeFimBPMN: MetaModeloBPMN!Activity (
			AtividadeFimBPMN.activityType.toString().startsWith('EventEnd')
		)
	to
		AtividadeFimUML: MetaModeloUML!ActivityFinalNode (
			name <- AtividadeFimBPMN.name
		)
}





rule TaskBPMN2AtividadeEstruturadaUML {
	from
		TaskBPMN: MetaModeloBPMN!Activity (
			TaskBPMN.activityType = #Task
		)
	to
		AtividadeEstruturadaUML: MetaModeloUML!StructuredActivityNode (
			name <- TaskBPMN.name
		)
}

rule ExclusiveGatewayBPMN2DecisionNodeUML {
	from
		ExclusiveGatewayBPMN: MetaModeloBPMN!Activity (
			ExclusiveGatewayBPMN.activityType = #GatewayDataBasedExclusive
		)
	to
		AtividadeEstruturadaUML: MetaModeloUML!DecisionNode (
			name <- 'ExclusiveGateway ID:' + ExclusiveGatewayBPMN.iD
		)
}

rule SubProcessBPMN2DecisionNodeUML {
	from
		SubProcessBPMN: MetaModeloBPMN!Activity (
			SubProcessBPMN.activityType = #SubProcess
		)
	to
		ExpansionRegionUML: MetaModeloUML!ExpansionRegion (
			name <- SubProcessBPMN.name
		)
}


rule SequenceEdgeBPM2ControlFlowUML {
	from
		SequenceEdgeBPM: MetaModeloBPMN!SequenceEdge
	to
		ActivityEdgeUML: MetaModeloUML!ControlFlow (
			name <- SequenceEdgeBPM.source.name + '->' + SequenceEdgeBPM.target.name,
			source <- MetaModeloUML!ActivityNode -> allInstances() -> select(activityNode
					| activityNode.name = SequenceEdgeBPM.source.name),
			target <- MetaModeloUML!ActivityNode -> allInstances() -> select(activityNode
					| activityNode.name = SequenceEdgeBPM.target.name)
		)
}

rule PoolBPM2PartitionUML {
	from
		PoolBPM: MetaModeloBPMN!Pool
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- PoolBPM.name
		)
}

rule LaneBPM2PartitionUML {
	from
		LaneBPM: MetaModeloBPMN!Lane
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- LaneBPM.name
		)
}

rule MessagingEdgeBPM2SendControlFlowUML {
	from
		MessagingEdgeBPM: MetaModeloBPMN!MessagingEdge
	to
		SendSignalUML: MetaModeloUML!SendSignalEvent (
			name <- MessagingEdgeBPM.source.name + '->' + MessagingEdgeBPM.target.name
		)
}