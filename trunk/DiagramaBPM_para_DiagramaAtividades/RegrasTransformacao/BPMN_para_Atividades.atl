-- @nsURI MetaModeloUML=http://www.eclipse.org/uml2/3.0.0/UML
-- @nsURI MetaModeloBPMN=http://stp.eclipse.org/bpmn


module BPMNparaAtividades;
create ModeloSaida: MetaModeloUML from ModeloEntrada: MetaModeloBPMN;

--Helper para verificar se a atividade é uma atividade inicial.
helper context MetaModeloBPMN!Activity def: isInitialNode(): Boolean =
	if self.activityType.toString().startsWith('EventStart') then
		true
	else
		false
	endif;

--Helper para verificar se a atividade é uma atividade final.
helper context MetaModeloBPMN!Activity def: isFinalNode(): Boolean =
	if self.activityType.toString().startsWith('EventEnd') then
		true
	else
		false
	endif;

rule DiagramaBPM2ModeloUML {
	from
		BPM: MetaModeloBPMN!BpmnDiagram
	to
		ModeloUML: MetaModeloUML!Model (
			name <- 'Modelo UML (gerado)'
		)
}

rule AtividadesBPM2AtividadesUML {
	from
	AtividadeInicialBPMN: MetaModeloBPMN!Activity,	
	AtividadeFinalBPMN: MetaModeloBPMN!Activity,
	AtividadesBPM: MetaModeloBPMN!Activity
	(
			AtividadeInicialBPMN.activityType = #EventStartEmpty and AtividadeFinalBPMN.activityType = #EventEndEmpty and 
			AtividadesBPM.activityType = #Task
		)
	to
		AtividadesUML: MetaModeloUML!Activity (
			name <- AtividadesBPM.name,
			package <- MetaModeloUML!Model -> allInstances() -> select(model | model.name
					= 'Modelo UML (gerado)')
		),
		StructuredActivity: MetaModeloUML!StructuredActivityNode (
			name <- AtividadesUML.name,
			activity <- AtividadesUML			
		),
		AtividadeInicialUML: MetaModeloUML!InitialNode (
			name <- AtividadeInicialBPMN.name,
			activity <- AtividadesUML
		),
		AtividadeFinalUML: MetaModeloUML!ActivityFinalNode (
			name <- AtividadeFinalBPMN.name,
			activity <- AtividadesUML
		)
}

rule SequenceEdgeBPM2ControlFlowUML {
	from
		SequenceEdgeBPM: MetaModeloBPMN!SequenceEdge
	to
		ActivityEdgeUML: MetaModeloUML!ControlFlow (
			name <- SequenceEdgeBPM.source.name + '->' + SequenceEdgeBPM.target.name,
			source <- MetaModeloUML!ActivityNode -> allInstances() -> select(activityNode
					| activityNode.activity.name = SequenceEdgeBPM.source.name),
			target <- MetaModeloUML!ActivityNode -> allInstances() -> select(activityNode
					| activityNode.activity.name = SequenceEdgeBPM.target.name)
		)
}


rule PoolBPM2PartitionUML {
	from
		PoolBPM: MetaModeloBPMN!Pool
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- PoolBPM.name	
		)
}


rule LaneBPM2PartitionUML {
	from
		LaneBPM: MetaModeloBPMN!Lane
	to
		PartitionUML: MetaModeloUML!ActivityPartition (
			name <- LaneBPM.name	
		)
}


rule MessagingEdgeBPM2SendControlFlowUML {
	from 
		MessagingEdgeBPM: MetaModeloBPMN!MessagingEdge
	to
		SendSignalUML: MetaModeloUML!SendSignalEvent (
			name <- MessagingEdgeBPM.source.name + '->' + MessagingEdgeBPM.target.name
		) , 
		ControlFlowUML: MetaModeloUML!ControlFlow		(
			name <- MessagingEdgeBPM.source.name + '->' + MessagingEdgeBPM.target.name
			
		)
		
}